import{_ as s,c as a,a as p,o as e}from"./app-C52C1I_-.js";const t={};function l(c,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="javascript-的-break-与-continue" tabindex="-1"><a class="header-anchor" href="#javascript-的-break-与-continue"><span>JavaScript 的 break 与 continue</span></a></h1><p>break 与 continue 用来控制循环流程。</p><h2 id="_1-break" tabindex="-1"><a class="header-anchor" href="#_1-break"><span>1. break</span></a></h2><p>break 用来中断循环，在 for 循环和 while 循环中都适用。</p><p>如：从列表中寻找 id 为 n 的项（每一项的 id 是唯一的）</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">9</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">===</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">代码块<span class="token number">123456789101112</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实即便没有 break，上面的语句也可以正常执行，因为 id 是唯一的，即便将整个数组遍历完，也只有一个目标项。</p><p>但是如果整个列表有<strong>上万</strong>条数据，除了获取 id ，还有一些消耗性能的操作，那 break 就变得很关键。 假如最好的情况，寻找的项就在第一项，这时候碰到 break ，剩下无用的寻找操作就都不会执行了，也没有必要执行。</p><p>将 break 应用在 while 中也是同理，满足某些条件的时候用来中断 while 循环。</p><p>如：游戏中的怪物产生了 4 次连击，伤害由四个随机 100 至 2000 的值累加构成，假如在累加的伤害过程中值达到 5000，则直接取当前累加结果作为最终伤害。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 累积伤害</span></span>
<span class="line"><span class="token keyword">var</span> time <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 累加次数</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span>time <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> one <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2001</span> <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  total <span class="token operator">+=</span> one<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>total <span class="token operator">&gt;</span> <span class="token number">5000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  time<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">代码块<span class="token number">12345678910111213141516</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 break，可以很容易的达到这个需求。</p><p>当然不使用 break 也是可以的，可以在达到条件后，将 <code>time</code> 变量累加到一个循环条件不成立的情况，也会跳出循环，但是建议使用 break ，否则可能还要去控制 break 之后的逻辑，因为 break 之后不一定就是循环结束了，也许还有其他操作。</p><blockquote><p>在 switch 语句中也有 break 参与，详细的作用可以参阅 switch 语句章节。</p></blockquote><h2 id="_2-continue" tabindex="-1"><a class="header-anchor" href="#_2-continue"><span>2. continue</span></a></h2><p>当循环中碰到 continue ，则会跳过这次循环，进入下一次循环。</p><p>如：输出 0 至 100 之间的奇数</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> i<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">代码块<span class="token number">12345678</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当碰到偶数的时候，则跳过这次循环，反之则为奇数的情况，会输出值。</p><p>这个例子比较简单，当一个逻辑复杂的循环体出现的时候，continue 可以让代码块变得稍微简洁。</p><p>如：对用户列表进行批量操作，只操作 id (id 一定是数字) 末尾为 1 的用户。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 这是一份伪代码</span></span>
<span class="line"><span class="token keyword">var</span> users <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token operator">...</span> 很多用户 <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> i<span class="token punctuation">,</span> len<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> users<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> user <span class="token operator">=</span> users<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span>id <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 取到末尾</span></span>
<span class="line">    <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span>edition<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果用户的版本不是免费的 0是免费 其他则是收费</span></span>
<span class="line">    <span class="token comment">// 做一些操作</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span>money<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果用户有余额</span></span>
<span class="line">    <span class="token comment">// 做一些操作</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">代码块<span class="token number">123456789101112131415161718192021</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>像这样，通过 continue 就可以让流程更清晰。</p><p>在 while 中的应用是一样的，continue 也可以在 while 中跳过当前循环。</p><p>使用 while 输出 0 至 100 的奇数：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  num<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">代码块<span class="token number">12345678910</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整个流程与 for 循环非常相似。</p><blockquote><p>许多代码规范不提倡使用 continue ，因为开发者水平的参差不齐，常有开发者在使用 continue 的时候，让整体逻辑产生了跳跃性，这不利于未来的代码维护者来对代码做阅读理解。</p></blockquote><h2 id="_3-小结" tabindex="-1"><a class="header-anchor" href="#_3-小结"><span>3. 小结</span></a></h2><p>break 和 continue 适用于 for 循环和 while 循环。</p><p>continue 的使用没有 break 频繁，使用 continue 的时候需要注意，尽量不要使程序跳跃幅度过大，不利于后期维护。</p><p>所有需要使用 continue 的地方，都可以不使用 continue 实现。</p><p>switch 语句中也可以使用 break 来结束 switch 语句的执行。</p>`,33)]))}const i=s(t,[["render",l]]),u=JSON.parse('{"path":"/JavaScript/18.html","title":"JavaScript 的 break 与 continue","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1. break","slug":"_1-break","link":"#_1-break","children":[]},{"level":2,"title":"2. continue","slug":"_2-continue","link":"#_2-continue","children":[]},{"level":2,"title":"3. 小结","slug":"_3-小结","link":"#_3-小结","children":[]}],"git":{"updatedTime":1742873601000,"contributors":[{"name":"playforkeeps","username":"playforkeeps","email":"597461518@qq.com","commits":1,"url":"https://github.com/playforkeeps"}],"changelog":[{"hash":"33cb72133abd6277291ef0c51663acdb35645a8b","time":1742873601000,"email":"597461518@qq.com","author":"playforkeeps","message":"更新 vuepress"}]},"filePathRelative":"JavaScript/18.md"}');export{i as comp,u as data};
