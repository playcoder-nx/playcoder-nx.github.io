import{_ as s,c as a,a as p,o as e}from"./app-vlpg1qcw.js";const l={};function c(t,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="javascript-函数" tabindex="-1"><a class="header-anchor" href="#javascript-函数"><span>JavaScript 函数</span></a></h1><blockquote><p>在 JavaScript中，函数是头等 (first-class) 对象，因为它们可以像任何其他对象一样具有属性和方法。它们与其他对象的区别在于函数可以被调用。简而言之，它们是 Function 对象。(MDN)</p></blockquote><p>函数就是一段代码片段，调用函数就是执行函数中的代码。</p><h2 id="_1-函数的使用" tabindex="-1"><a class="header-anchor" href="#_1-函数的使用"><span>1. 函数的使用</span></a></h2><h3 id="_1-1-语法" tabindex="-1"><a class="header-anchor" href="#_1-1-语法"><span>1.1 语法</span></a></h3><p>函数使用前通常与变量一样需要先进行声明，用 <code>function</code> 关键字定义函数。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 常见的函数的定义方式</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token parameter">参数<span class="token number">1</span><span class="token punctuation">,</span> 参数<span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">...</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  代码片段<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> 返回值<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 调用函数 (执行函数中的代码)</span></span>
<span class="line"><span class="token keyword">var</span> 函数的返回值 <span class="token operator">=</span> <span class="token function">函数名</span><span class="token punctuation">(</span>参数<span class="token number">1</span><span class="token punctuation">,</span> 参数<span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">代码块<span class="token number">123456789</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>调用函数就是执行函数中的代码</li><li>参数是调用函数的时候传递过去的，在函数执行过程中可以访问到</li><li>函数执行完毕后可以有一个返回值，调用函数的地方可以接收到这个返回值</li></ul><h3 id="_1-2-调用函数" tabindex="-1"><a class="header-anchor" href="#_1-2-调用函数"><span>1.2 调用函数</span></a></h3><blockquote><p>使用 <code>函数名()</code> 的方式即可调用一个函数</p></blockquote><p>以下是一个最简单的函数：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：&quot;hello&quot;</span></span>
<span class="line">代码块<span class="token number">12345</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用这个函数就会在控制台输出 <code>hello</code> 字符串。</p><p><strong>这个函数没有返回值，默认会返回一个 <code>undefined</code></strong>。</p><h3 id="_1-3-带有参数与返回值的函数" tabindex="-1"><a class="header-anchor" href="#_1-3-带有参数与返回值的函数"><span>1.3 带有参数与返回值的函数</span></a></h3><blockquote><p>在声明函数的时候，可以对参数也做上说明</p></blockquote><p>假设有一个需求，<strong>需要一个计算三角形周长的函数</strong>。</p><p>计算三角形周长则需要知道三角形三条边各自的长度，然后将他们求和。</p><p>定义函数的时候就可以将三条边作为参数进行声明。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">calcPerimeter</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// a, b, c 分别代表三条边</span></span>
<span class="line">  <span class="token keyword">var</span> sum <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> sum<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 调用函数 并将返回值赋值给perimeter</span></span>
<span class="line"><span class="token keyword">var</span> perimeter <span class="token operator">=</span> <span class="token function">calcPerimeter</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">代码块<span class="token number">123456789</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在调用函数的时可以传递值过去，这些值可以在函数中被访问。</p><p>在以上 <code>calcPerimeter</code> 函数被调用的时，传递了 <code>3, 4, 5</code> 三个值。</p><p>三个值对应到函数声明时定义的三个参数 <code>a, b, c</code>。</p><p>所以函数执行过程中 <code>sum</code> 的值为 <code>3 + 4 + 5</code>，即 <code>12</code>，随后 <code>sum</code> 被作为返回值进行返回。</p><p>最终变量 <code>perimeter</code> 也会被赋值为12。</p><h2 id="_2-怎么运用函数" tabindex="-1"><a class="header-anchor" href="#_2-怎么运用函数"><span>2. 怎么运用函数</span></a></h2><h3 id="_2-1-合理包装内容" tabindex="-1"><a class="header-anchor" href="#_2-1-合理包装内容"><span>2.1 合理包装内容</span></a></h3><p>函数可以对代码进行封装，让逻辑更加清晰。</p><p>比如如下代码块：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 改写前</span></span>
<span class="line"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> i<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> len<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> len <span class="token operator">=</span> num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> i <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">代码块<span class="token number">123456789101112131415</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码第一眼可能无法看出具体在做什么，仅需要做一点修改，就能有所改善。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 改写后</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">isPrimeNumber</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token keyword">var</span> i<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">var</span> len<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> len <span class="token operator">=</span> num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> i <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> flag<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">isPrimeNumber</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">代码块<span class="token number">12345678910111213141516171819202122</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>改写后的代码似乎多了几行，但是将其中核心部分包装成了函数。</p><p>通过 <code>isPrimeNumber</code> 函数名可以很容易的了解到这一段代码作用是用来判断一个数是否为<code>质数</code>。</p><p>当然有个前提就是起一个 <strong>可以让大部分人看得懂</strong> 的函数名。</p><h3 id="_2-2-优秀的函数名" tabindex="-1"><a class="header-anchor" href="#_2-2-优秀的函数名"><span>2.2 优秀的函数名</span></a></h3><p>优秀的函数名可以帮助他人更容易理解代码，同时当自己一段时间后再回头看代码时，能更容易进入当时写代码时候的思维模式等。</p><p>这里提供几个函数命名的建议，具体的命名可以根据团队规范、个人成长等做调整。</p><h4 id="_2-2-1-拼写准确" tabindex="-1"><a class="header-anchor" href="#_2-2-1-拼写准确"><span>2.2.1 拼写准确</span></a></h4><p>准确的拼写十分重要，绝大多数情况下函数名都会是英文单词组成的。</p><p>当然许多时候手一快可能就少了一个字母，或者错将 <code>wrap</code> 进行乾坤大挪移拼写成了 <code>warp</code>。</p><p>许多情况是无法避免的，经常需要自检。</p><p>当然可以借助一些单词的检查插件，如 <code>Visual Studio Code</code> 可以借助 <code>Code Spell Checker</code> 插件来检查单词的正确性。</p><p>再者碰到想起的函数名但是单词拼写不出来，尽可能翻词典，日积月累能有大量的词汇沉淀。</p><h4 id="_2-2-2-尽量不使用拼音或者混用拼写" tabindex="-1"><a class="header-anchor" href="#_2-2-2-尽量不使用拼音或者混用拼写"><span>2.2.2 尽量不使用拼音或者混用拼写</span></a></h4><p>尽量不要使用拼音或者是首字母缩写。</p><p>以下函数名或许会造成困扰：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">jslsh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">jsNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">代码块<span class="token number">123</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上是<code>计算两数和</code>函数的命名，可能只有天和地知道这个是什么意思。</p><p>当然，如果是自己写 demo 或者测试代码的时候，其实不需要考虑这么多。</p><h4 id="_2-2-3-有-状态-的函数名" tabindex="-1"><a class="header-anchor" href="#_2-2-3-有-状态-的函数名"><span>2.2.3 有“状态”的函数名</span></a></h4><p>如碰到函数功能是判断<code>是否</code>、<code>有没有</code>、<code>可以</code>的时候，可以带上一些前缀，比如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 是否登入</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">isLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">代码块<span class="token number">12</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时可以合理的使用动词，比如<code>打开文件</code>就可以使用 <code>openFile</code> 函数名，具体的状态可以根据语境、函数作用、个人习惯等做调整使用。</p><h4 id="_2-2-4-合理使用缩写" tabindex="-1"><a class="header-anchor" href="#_2-2-4-合理使用缩写"><span>2.2.4 合理使用缩写</span></a></h4><p>使用词语的缩写尽量使用通用的缩写</p><p>如：</p><ul><li>pwd - password</li><li>mgr - manager</li><li>del - delete</li><li>…</li></ul><p>这些缩写大部分开发者是可以看的懂的缩写。</p><h2 id="_3-函数示例" tabindex="-1"><a class="header-anchor" href="#_3-函数示例"><span>3. 函数示例</span></a></h2><h3 id="_3-1-计算圆的面积" tabindex="-1"><a class="header-anchor" href="#_3-1-计算圆的面积"><span>3.1 计算圆的面积</span></a></h3><p>分析：根据圆面积公式 S=π·r·r，其中 S 就是要求的值，即函数的返回值，π 是常量(固定的一个值)，半径r是未知数，所以r就可以设计成参数</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">circleArea</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> pi <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> pi <span class="token operator">*</span> r <span class="token operator">*</span> r<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 计算半径为10的圆的面积</span></span>
<span class="line"><span class="token keyword">var</span> area <span class="token operator">=</span> <span class="token function">circleArea</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">代码块<span class="token number">12345678</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-判断某个dom元素是否含有某个类名" tabindex="-1"><a class="header-anchor" href="#_3-2-判断某个dom元素是否含有某个类名"><span>3.2 判断某个DOM元素是否含有某个类名</span></a></h3><p>分析：</p><p><code>某个DOM</code>和<code>某个类名</code>可以说明有两个未知量，可以设计成两个参数。</p><p>根据描述也可以确定一个 <code>某个DOM</code> 的类型是个 <code>DOM</code> 对象，<code>某个类名</code>是个字符串</p><p>只要拿到这个DOM的 <code>class</code> 属性，判断里面是不是含有这个类型即可得到结果</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">hasClass</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> className</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// el 是 element的缩写，表示一个dom元素</span></span>
<span class="line">  </span>
<span class="line">  <span class="token comment">// 如果没有元素 则返回</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 根据空格分割成数组</span></span>
<span class="line">  <span class="token comment">// 可以不使用 split 方法，使用字符串也可以用indexOf匹配</span></span>
<span class="line">  <span class="token keyword">var</span> classList <span class="token operator">=</span> el<span class="token punctuation">.</span>className<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 判断是否存在</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>classList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  </span>
<span class="line">  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">代码块<span class="token number">12345678910111213141516171819</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-函数的其他知识" tabindex="-1"><a class="header-anchor" href="#_4-函数的其他知识"><span>4. 函数的其他知识</span></a></h2><blockquote><p>以下扩展内容可能需要一定的知识积累，遇到不懂的地方可以停下脚步，先学习下一章节</p></blockquote><h3 id="_4-1-函数表达式" tabindex="-1"><a class="header-anchor" href="#_4-1-函数表达式"><span>4.1 函数表达式</span></a></h3><p>以上篇幅的函数其实都通过<code>函数声明</code>的方式来定义，还有一种方式就是使用函数表达式定义函数。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 函数声明</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 函数表达式</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">代码块<span class="token number">123456789</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上述例子可以看出写法上的区别就是<code>函数表达式</code>是将函数赋值给了变量。</p><p>这两种方式创建的函数最大的区别在于，<strong>不能提前调用使用函数表达式创建的函数</strong></p><p>光看句子有点抽象，举个例子?：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token function">add1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 函数声明</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">add1</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 函数表达式</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">add2</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">代码块<span class="token number">12345678910111213</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面一段代码在执行的时候会报 <code>add2 is not a function</code> 的错误，表示 <code>add2</code> 不是函数，也就是说 <code>add2</code> 不能被提前使用，而 <code>add1</code> 可以。</p><p>具体原因可以查看<code>执行上下文</code>章节。</p><h3 id="_4-2-函数作用域" tabindex="-1"><a class="header-anchor" href="#_4-2-函数作用域"><span>4.2 函数作用域</span></a></h3><p>函数有他自己的作用域，函数内声明的变量等<code>通常情况下</code>不能被外部访问，但是函数可以访问到外部的变量或者其他函数等</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：1</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：2</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: b is not defined</span></span>
<span class="line">代码块<span class="token number">123456789101112</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行以上代码会报 <code>b is not defined</code> 错误。</p><h3 id="_4-3-匿名函数" tabindex="-1"><a class="header-anchor" href="#_4-3-匿名函数"><span>4.3 匿名函数</span></a></h3><p>没有名字的函数就是一个匿名函数</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我是一个匿名函数&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">代码块<span class="token number">123</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了在<code>函数表达式</code>中会出现匿名函数，还有许多场景。</p><p>相对常见的一个就是<code>自执行匿名函数</code>，MDN官方翻译为<code>立即调用函数表达式</code>。</p><p><code>自执行</code>就是这个函数声明后就会立即执行，自执行的匿名函数通常会被用来<code>形成独立的作用域</code>。</p><p>如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">代码块<span class="token number">12345</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个自执行的匿名函数，这个匿名函数是被包裹了一段括号后才被调用的。</p><p>以下这段代码会报错：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 报错</span></span>
<span class="line"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">代码块<span class="token number">123456</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>浏览器会告诉你必须给函数一个名字。</p><p>通过括号包裹一段函数，让<code>js引擎</code>识别成他是一个函数表达式，再对他进行执行，就不会报错，这是加括号的原因。</p><p>同理，可以使用 <code>+</code>，<code>!</code> 等运算符代替括号，让一个匿名函数成为一个函数表达式即可。</p><p>大部分第三方框架都会通过一个自执行的匿名函数包裹代码，与浏览器全局环境隔离，避免污染到全局环境。</p><h3 id="_4-4-具有函数名的函数表达式" tabindex="-1"><a class="header-anchor" href="#_4-4-具有函数名的函数表达式"><span>4.4 具有函数名的函数表达式</span></a></h3><p>函数表达式进行声明的时候也可以使用具名函数</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> <span class="token function-variable function">count</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我是一个函数&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">代码块<span class="token number">123</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上这段代码是不会报错的，但是不能通过 <code>fn</code> 访问到函数，这里的 <code>fn</code> 只能在函数内部进行访问，通常在使用递归的形式做计算的时候会用到这种写法。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> <span class="token function-variable function">count</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> num<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">代码块<span class="token number">123456789</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个例子，就是在函数内部访问 <code>fn</code> 调用自己，使用递归的形式求和。</p><p><strong>注：递归相关的知识可以参考相关文献进行学习</strong></p><h3 id="_4-5-arguments" tabindex="-1"><a class="header-anchor" href="#_4-5-arguments"><span>4.5 arguments</span></a></h3><blockquote><p>arguments 是一个对应于传递给函数的参数的类数组对象。(MDN)</p></blockquote><p>通常情况下函数都具有 <code>arguments</code> 对象，可以在函数内部直接访问到。</p><p>他是一个类数组，即长得很像数组，成员都是用数字编号，同时具有 length 属性。</p><p>arguments 中存放着当前函数被调用时，传递过来的所有参数，即便不声明参数，也可以通过 arguments 取到传递过来的参数。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">代码块<span class="token number">12345</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行上述代码，可以看到在控制台输出了一个对象，存放的就是所有传递过去的参数，利用这一特性，就可以不限制参数个数，或者让函数做中转站（拦截函数），利用 arguments 将参数传递给另一个函数。</p><p>如，一个不确定用户输入的参数个数的求和函数：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">var</span> i<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">var</span> len<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    total <span class="token operator">+=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> total<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> total <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：25</span></span>
<span class="line">代码块<span class="token number">1234567891011121314</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过循环遍历 <code>arguments</code> 对象，就可以得到所有参数，然后做累加就可以达到求和的目的。</p><h3 id="_4-6-函数和方法" tabindex="-1"><a class="header-anchor" href="#_4-6-函数和方法"><span>4.6 函数和方法</span></a></h3><p>方法在本质上是个函数。</p><p>通常都能听到“调用一下某个方法”，“取到某个方法的返回值”，这里的方法其实就是一个函数。</p><p>一般方法是用来描述对象的某个行为的，但是平时我们会混用，口头交流的时候会经常把函数直接称作方法。</p><p>只要自己理解，不需要去纠结函数和方法到底是什么，也不用特意纠正别人的说法，大家都能听得懂就行。</p><h3 id="_4-7-js-doc-注释" tabindex="-1"><a class="header-anchor" href="#_4-7-js-doc-注释"><span>4.7 JS DOC 注释</span></a></h3><p>使用 <code>JS DOC</code> 描述函数是非常良好的习惯，良好的 <code>JS DOC</code> 书写还可以使用工具快速生成文档。</p><p><code>JS DOC</code> 对函数的描述大体如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 这是这个求幂函数 计算 x 的 y 次方</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Number<span class="token punctuation">}</span></span> <span class="token parameter">x</span> - 底数</span>
<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span> <span class="token parameter">y</span> - 指数</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">代码块<span class="token number">12345678</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外还可以描述返回值等。</p><h3 id="_4-8-纯函数与副作用" tabindex="-1"><a class="header-anchor" href="#_4-8-纯函数与副作用"><span>4.8 纯函数与副作用</span></a></h3><p>所谓纯函数，就是没有副作用的函数</p><p>一个函数从执行开始到结束，没有对外部环境做任何操作，即对外部环境没有任何影响（没有副作用），这样的函数就是纯函数。</p><p>纯函数只负责输入输出，对于一种输入只有一种函数返回值。</p><p>如果函数中存在 <code>Math.random</code> 这种影响返回值的函数，也不能算是纯函数。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 纯函数</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 非纯函数</span></span>
<span class="line"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;小明&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">function</span> changeName <span class="token punctuation">{</span></span>
<span class="line">  person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;小红&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 影响了函数外的内容，产生了副作用</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">代码块<span class="token number">12345678910</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-9-构造函数" tabindex="-1"><a class="header-anchor" href="#_4-9-构造函数"><span>4.9 构造函数</span></a></h3><p>当一个函数与 <code>new</code> 关键字一起被调用的时候，就会作为一个构造函数。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我是&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;阿梅&#39;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">person<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">代码块<span class="token number">1234567891011121314</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到当函数作为构造函数调用的时候，默认返回的是一个对象。</p><p>细心的读者仔细观察就能发现，构造函数的默认返回值是函数体内的 this。</p><p>事实上构造函数的执行有一定流程：</p><ol><li>创建一个空对象，将函数的this指向这个空对象</li><li>执行函数</li><li>如果函数没有指定返回值，则直接返回 this（一开始创建的空对象），否则返回指定返回值</li></ol><p>理解这个流程，就能理解构造函数的返回值。</p><p>具体的函数的 <code>prototype</code> 属性等可以参阅<code>原型</code>章节。</p><h2 id="_5-小结" tabindex="-1"><a class="header-anchor" href="#_5-小结"><span>5. 小结</span></a></h2><p>函数特性相对较多，也是 JavaScript 的核心之一。</p><p>函数可以用于封装代码，提供代码的复用率和可读性，在大部分情况下，当两段代码具有超高相似度时，应当设计成函数，不同的部分使用参数进行区分。</p>`,144)]))}const o=s(l,[["render",c]]),u=JSON.parse('{"path":"/JavaScript/11.html","title":"JavaScript 函数","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1. 函数的使用","slug":"_1-函数的使用","link":"#_1-函数的使用","children":[{"level":3,"title":"1.1 语法","slug":"_1-1-语法","link":"#_1-1-语法","children":[]},{"level":3,"title":"1.2 调用函数","slug":"_1-2-调用函数","link":"#_1-2-调用函数","children":[]},{"level":3,"title":"1.3 带有参数与返回值的函数","slug":"_1-3-带有参数与返回值的函数","link":"#_1-3-带有参数与返回值的函数","children":[]}]},{"level":2,"title":"2. 怎么运用函数","slug":"_2-怎么运用函数","link":"#_2-怎么运用函数","children":[{"level":3,"title":"2.1 合理包装内容","slug":"_2-1-合理包装内容","link":"#_2-1-合理包装内容","children":[]},{"level":3,"title":"2.2 优秀的函数名","slug":"_2-2-优秀的函数名","link":"#_2-2-优秀的函数名","children":[]}]},{"level":2,"title":"3. 函数示例","slug":"_3-函数示例","link":"#_3-函数示例","children":[{"level":3,"title":"3.1 计算圆的面积","slug":"_3-1-计算圆的面积","link":"#_3-1-计算圆的面积","children":[]},{"level":3,"title":"3.2 判断某个DOM元素是否含有某个类名","slug":"_3-2-判断某个dom元素是否含有某个类名","link":"#_3-2-判断某个dom元素是否含有某个类名","children":[]}]},{"level":2,"title":"4. 函数的其他知识","slug":"_4-函数的其他知识","link":"#_4-函数的其他知识","children":[{"level":3,"title":"4.1 函数表达式","slug":"_4-1-函数表达式","link":"#_4-1-函数表达式","children":[]},{"level":3,"title":"4.2 函数作用域","slug":"_4-2-函数作用域","link":"#_4-2-函数作用域","children":[]},{"level":3,"title":"4.3 匿名函数","slug":"_4-3-匿名函数","link":"#_4-3-匿名函数","children":[]},{"level":3,"title":"4.4 具有函数名的函数表达式","slug":"_4-4-具有函数名的函数表达式","link":"#_4-4-具有函数名的函数表达式","children":[]},{"level":3,"title":"4.5 arguments","slug":"_4-5-arguments","link":"#_4-5-arguments","children":[]},{"level":3,"title":"4.6 函数和方法","slug":"_4-6-函数和方法","link":"#_4-6-函数和方法","children":[]},{"level":3,"title":"4.7 JS DOC 注释","slug":"_4-7-js-doc-注释","link":"#_4-7-js-doc-注释","children":[]},{"level":3,"title":"4.8 纯函数与副作用","slug":"_4-8-纯函数与副作用","link":"#_4-8-纯函数与副作用","children":[]},{"level":3,"title":"4.9 构造函数","slug":"_4-9-构造函数","link":"#_4-9-构造函数","children":[]}]},{"level":2,"title":"5. 小结","slug":"_5-小结","link":"#_5-小结","children":[]}],"git":{},"filePathRelative":"JavaScript/11.md"}');export{o as comp,u as data};
