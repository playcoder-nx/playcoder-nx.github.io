import{_ as n,c as a,a as p,o as e}from"./app-vlpg1qcw.js";const l={};function c(t,s){return e(),a("div",null,s[0]||(s[0]=[p(`<h1 id="javascript-switch-语句" tabindex="-1"><a class="header-anchor" href="#javascript-switch-语句"><span>JavaScript switch 语句</span></a></h1><blockquote><p>switch 语句评估一个表达式，将表达式的值与case子句匹配，并执行与该情况相关联的语句。—— MDN</p></blockquote><p>switch 是另一种控制流程的方式，根据条件执行不同的代码块。</p><p>能用 switch 实现的都可以用 if 实现。</p><h2 id="_1-基本语法" tabindex="-1"><a class="header-anchor" href="#_1-基本语法"><span>1. 基本语法</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">  <span class="token keyword">switch</span> <span class="token punctuation">(</span>表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> 表达式结果为值<span class="token number">1</span><span class="token literal-property property">的时候</span><span class="token operator">:</span></span>
<span class="line">      做的事情<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> 表达式结果为值<span class="token number">2</span><span class="token literal-property property">的时候</span><span class="token operator">:</span></span>
<span class="line">      做的事情<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token operator">...</span><span class="token operator">:</span></span>
<span class="line">      做的事情<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token literal-property property">表达式结果为值n的时候</span><span class="token operator">:</span></span>
<span class="line">      做的事情<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">      上面一个情况都没中的时候做的事情<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">代码块<span class="token number">12345678910111213141516</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>switch 语句在执行的时候会先接受一个表达式，最后根据表达式的结果进行条件的匹配，即 <code>case</code> 后面的值。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">switch</span> <span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;case的值是2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;case的值是3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;case的值是4&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;case的值是5&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;没有匹配到值&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">代码块<span class="token number">12345678910111213141516</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://img.mukewang.com/wiki/5e7a2f060a247f7a15440746.jpg" alt="图片描述"></p><p><code>num</code> 为 3 ，所以加上 1 之后为 4 ，case 匹配到的就是 <code>4</code> ，所以输出了<code>case的值是4</code>，但是紧接着后面的<code>case的值是5</code>与<code>没有匹配到值</code>也被输出了。 这是因为分支内碰到 <code>break</code> 才会中断执行，如果不中断，即便后面的条件不匹配了，里面的代码块还是会被继续执行。</p><p><strong>需要注意的是 case 后面的值与表达式的结果在比较的时候是使用严格相等(===)的</strong>。</p><h2 id="_2-default-的位置可以不固定" tabindex="-1"><a class="header-anchor" href="#_2-default-的位置可以不固定"><span>2. default 的位置可以不固定</span></a></h2><p>default 不一定要写在末尾，但通常推荐写在末尾。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我是default&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token boolean">true</span><span class="token operator">:</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1 不可能大于 2，肯定是代码写错了&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">代码块<span class="token number">1234567</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://img.mukewang.com/wiki/5e7a2f710a313c5315440432.jpg" alt="图片描述"></p><p>在所有case都不匹配的时候，就会回去走 default 。</p><p>需要注意的是，default 语句块里也需要加 <code>break</code> ，不然会继续往下执行，直至碰到 <code>break</code> ，大部分情况下只有末尾的分支不需要加 <code>break</code> ，因为已经是最后一个分支了。</p><h2 id="_3-灵活使用-break" tabindex="-1"><a class="header-anchor" href="#_3-灵活使用-break"><span>3. 灵活使用 break</span></a></h2><p>switch 语句与 break 的特性结合可以很灵活。</p><p>如以下场景：</p><ul><li>服务端返回了用户信息，当用户的 VIP 等级为 1、2、3 的时候，显示初级VIP，VIP 等级为 4、5 的时候，显示中级 VIP，当 VIP 等级为 6 的时候，显示高级 VIP，否则显示普通会员。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">vip</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">switch</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span>vip<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;初级vip&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;中级vip&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;高级vip&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;普通会员&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 输出：&quot;初级vip&quot;</span></span>
<span class="line">代码块<span class="token number">1234567891011121314151617181920</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>利用没有 break 就会往下执行的特点，可以给条件归类。相比 <code>if</code> 语句，使用 switch 有更强的表现力。</p><ul><li>页面中有一排图片，共 4 张，当用户选择了某一张后，隐藏这张图片前面的所有图片，取消选择后显示所有图片。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">showImage</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;显示第&#39;</span> <span class="token operator">+</span> index <span class="token operator">+</span> <span class="token string">&#39;图片&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">hideAllImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;先隐藏所有图片&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 点击事件</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">event</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> selected <span class="token operator">=</span> e<span class="token punctuation">.</span>index<span class="token punctuation">;</span> <span class="token comment">// 0表示没有选择 1表示选择第一张 以此类推</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">hideAllImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">switch</span> <span class="token punctuation">(</span>selected<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">showImage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">showImage</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">showImage</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">showImage</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">event</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实这个需求，使用 switch 并不是最适合的场景，假如图片一多，上百上千张，这种方式就显得有些愚蠢了。</p><p>这提供这种实现方式不是为了显示他有多好，而是为了能在思考问题的时候，可以想到有这样的方案，来评判是不是更适合现有业务场景。</p><p><strong>没有最好的方案，只有最适合的方案。</strong></p><h2 id="_4-小结" tabindex="-1"><a class="header-anchor" href="#_4-小结"><span>4. 小结</span></a></h2><p>switch 语句可以做到的，if 语句都可以做到，实际开发应结合具体业务做选择。</p><p>依据 switch 的 break 和 default 特性，常常可以很方便的实现其他方式需要大量额外代码的需求。</p>`,31)]))}const o=n(l,[["render",c]]),u=JSON.parse('{"path":"/JavaScript/16.html","title":"JavaScript switch 语句","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1. 基本语法","slug":"_1-基本语法","link":"#_1-基本语法","children":[]},{"level":2,"title":"2. default 的位置可以不固定","slug":"_2-default-的位置可以不固定","link":"#_2-default-的位置可以不固定","children":[]},{"level":2,"title":"3. 灵活使用 break","slug":"_3-灵活使用-break","link":"#_3-灵活使用-break","children":[]},{"level":2,"title":"4. 小结","slug":"_4-小结","link":"#_4-小结","children":[]}],"git":{},"filePathRelative":"JavaScript/16.md"}');export{o as comp,u as data};
