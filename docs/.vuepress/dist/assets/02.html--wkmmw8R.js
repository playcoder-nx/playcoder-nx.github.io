import{_ as t,c as a,a as c,o}from"./app-2nJfhqZ0.js";const d={};function n(r,e){return o(),a("div",null,e[0]||(e[0]=[c('<h2 id="_6-2-请求服务器数据" tabindex="-1"><a class="header-anchor" href="#_6-2-请求服务器数据"><span>6.2 请求服务器数据</span></a></h2><p>前面6.1节介绍的是如何在<code>HTML</code>页面中加载异步数据的方法，即如何从服务器上取得静态的数据。但页面的应用远不仅局限于此，<code>Ajax</code>技术最终体现在与服务器的动态数据实现人机交互中，即客户端传递带有参数的请求，服务器接收后，分析所传递来的请求，并做出相应的响应，发送对应数据至客户端，客户端接收请求返回的数据，从而实现了数据的双向传递。</p><p>下面就介绍交互式函数的应用。</p><h3 id="_6-2-1-get-请求数据" tabindex="-1"><a class="header-anchor" href="#_6-2-1-get-请求数据"><span>6.2.1 <code>$.get()</code>请求数据</span></a></h3><p>在上面的 6.1.5小节中，通过调用全局函数<code>$.get()</code>，实现了XML文档的加载。除加载数据外，<code>$.get()</code>函数还可以实现数据的请求。下面通过一个示例介绍<code>$.get()</code>函数带参请求服务器中的数据。</p>',5)]))}const s=t(d,[["render",n]]),i=JSON.parse('{"path":"/jQuery/06ajax/02.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"6.2 请求服务器数据","slug":"_6-2-请求服务器数据","link":"#_6-2-请求服务器数据","children":[{"level":3,"title":"6.2.1 $.get()请求数据","slug":"_6-2-1-get-请求数据","link":"#_6-2-1-get-请求数据","children":[]}]}],"git":{},"filePathRelative":"jQuery/06ajax/02.md"}');export{s as comp,i as data};
