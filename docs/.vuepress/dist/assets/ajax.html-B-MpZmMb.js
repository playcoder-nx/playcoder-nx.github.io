import{_ as t,c as o,a as r,o as a}from"./app-C52C1I_-.js";const d={};function c(s,e){return a(),o("div",null,e[0]||(e[0]=[r('<table><thead><tr><th>属性或者方法</th><th>作用</th><th></th></tr></thead><tbody><tr><td><strong>readyState</strong></td><td>属性返回一个 XMLHttpRequest 代理当前所处的状态。一个 XHR 代理总是处于下列状态中的一个：</td><td>0: UNSENT-代理被创建，但尚未调用 open() 方法。<br>1:OPENED-<code>open()</code> 方法已经被调用。<br>2:HEADERS_RECEIVED-<code>send()</code> 方法已经被调用，并且头部和状态已经可获得。<br>3:LOADING-下载中；<code>responseText</code> 属性已经包含部分数据。<br>4:DONE-下载操作已完成。</td></tr><tr><td>status</td><td>只读属性 <strong><code>XMLHttpRequest.status</code></strong> 返回了 <code>XMLHttpRequest</code> 响应中的数字状态码。<code>status</code> 的值是一个<code>无符号短整型</code>。在请求完成前，<code>status</code> 的值为 <code>0</code>。值得注意的是，如果 XMLHttpRequest 出错，浏览器返回的 status 也为 0。status 码是标准的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Reference/Status" target="_blank" rel="noopener noreferrer">HTTP status codes</a>。举个例子，<code>status</code> <code>200</code> 代表一个成功的请求。如果服务器响应中没有明确指定 status 码，<code>XMLHttpRequest.status</code> 将会默认为 <code>200</code>。</td><td>HTTP 响应状态码用来表明特定 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP" target="_blank" rel="noopener noreferrer">HTTP</a> 请求是否成功完成。 响应被归为以下五大类： <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Reference/Status#%E4%BF%A1%E6%81%AF%E5%93%8D%E5%BA%94" target="_blank" rel="noopener noreferrer">信息响应</a> (<code>100</code>–<code>199</code>) <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Reference/Status#%E6%88%90%E5%8A%9F%E5%93%8D%E5%BA%94" target="_blank" rel="noopener noreferrer">成功响应</a> (<code>200</code>–<code>299</code>) <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Reference/Status#%E9%87%8D%E5%AE%9A%E5%90%91%E6%B6%88%E6%81%AF" target="_blank" rel="noopener noreferrer">重定向消息</a> (<code>300</code>–<code>399</code>) <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Reference/Status#%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%94%99%E8%AF%AF%E5%93%8D%E5%BA%94" target="_blank" rel="noopener noreferrer">客户端错误响应</a> (<code>400</code>–<code>499</code>) <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Reference/Status#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%94%99%E8%AF%AF%E5%93%8D%E5%BA%94" target="_blank" rel="noopener noreferrer">服务端错误响应</a> (<code>500</code>–<code>599</code>)</td></tr><tr><td>onreadystatechange</td><td>只要 <code>readyState</code> 属性发生变化，就会调用相应的<a href="https://developer.mozilla.org/zh-CN/docs/Web/Events/Event_handlers" target="_blank" rel="noopener noreferrer">处理函数</a>。这个回调函数会被用户线程所调用。<strong><code>XMLHttpRequest.onreadystatechange</code></strong> 会在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener noreferrer"><code>XMLHttpRequest</code></a> 的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/readyState" target="_blank" rel="noopener noreferrer"><code>readyState</code></a> 属性发生改变时触发 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/readystatechange_event" target="_blank" rel="noopener noreferrer"><code>readystatechange</code></a> 事件的时候被调用。</td><td></td></tr><tr><td>send</td><td>用于发送 HTTP 请求。如果是异步请求（默认为异步请求），则此方法会在请求发送后立即返回；如果是同步请求，则此方法直到响应到达后才会返回。<code>XMLHttpRequest.send()</code> 方法接受一个可选的参数，其作为请求主体；如果请求方法是 GET 或者 HEAD，则应将请求主体设置为 null。</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table>',1)]))}const l=t(d,[["render",c]]),p=JSON.parse('{"path":"/JavaScript/ajax.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[],"git":{"updatedTime":1742873601000,"contributors":[{"name":"playforkeeps","username":"playforkeeps","email":"597461518@qq.com","commits":1,"url":"https://github.com/playforkeeps"}],"changelog":[{"hash":"33cb72133abd6277291ef0c51663acdb35645a8b","time":1742873601000,"email":"597461518@qq.com","author":"playforkeeps","message":"更新 vuepress"}]},"filePathRelative":"JavaScript/ajax.md"}');export{l as comp,p as data};
