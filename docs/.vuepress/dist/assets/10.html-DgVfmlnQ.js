import{_ as a,c as n,a as e,o as p}from"./app-vlpg1qcw.js";const t={};function l(c,s){return p(),n("div",null,s[0]||(s[0]=[e(`<h1 id="javascript-表达式" tabindex="-1"><a class="header-anchor" href="#javascript-表达式"><span>JavaScript 表达式</span></a></h1><blockquote><p>表示式亦称表达式、运算式或数学表达式，在数学领域中是一些符号依据上下文的规则，有限而定义良好的组合。数学符号可用于标定数字（常量）、变量、操作、函数、括号、标点符号和分组，帮助确定操作顺序以及有其它考量的逻辑语法。——Wikipedia</p></blockquote><p>表达式可以简单理解成一种式子，如 <code>2 + 3</code> 就是一种表达式，通常会叫做算术表达式。</p><p>通常表达式用来产生值，任何需要用到值的地方都可以放置表达式。</p><p>一个表达式由操作数与操作符组成，操作数可以由变量、常量或者另一个表达式表示。</p><p>如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>c <span class="token operator">*</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中第五行等号右边就是一个算术表达式，其由多个算术表达式组成。</p><p>除了函数调用的括号，剩下所有括号包裹的都是一个表达式。（注意：表达式并不是一定要括号包括，这里是为了方便划分）</p><p>在等号右侧表达式计算完后，得到一个值，最后会赋值给变量 <code>res</code>，这就是一个赋值表达式。</p><p>可以见到表达式无处不在。</p><blockquote><p>注意：有些文献中会把调用函数描述为一个函数表达式。但通常在JavaScript中会把一种创建函数的方式描述为函数表达式，具体可以查阅函数章节。</p></blockquote><h2 id="_1-为什么要理解表达式" tabindex="-1"><a class="header-anchor" href="#_1-为什么要理解表达式"><span>1. 为什么要理解表达式</span></a></h2><p>表达式是一个基础而又重要的概念，同时又比较抽象，初学者不好理解。</p><p>我个人理解的表达式，就是一种具有规则、可以得到一个结果的式子。</p><p>理解表达式主要是为学习铺路，大量文献中都会用到<code>表达式</code>这个关键词来描述内容。</p><p>排开这个原因，还有许多表达式是需要单独学习的，如<code>Cron表达式</code>，<code>正则表达式</code>，对表达式的含义有所理解，就很容易接受类似的新名词，理解他们为什么是表达式。</p><h2 id="_2-javascript-表达式" tabindex="-1"><a class="header-anchor" href="#_2-javascript-表达式"><span>2. JavaScript 表达式</span></a></h2><p>JavaScript 中的表达式非常细，这些表达式可以组成一行行语句，这里例举部分，方便读者结合理解。</p><h3 id="_2-1-原始表达式" tabindex="-1"><a class="header-anchor" href="#_2-1-原始表达式"><span>2.1 原始表达式</span></a></h3><p>变量、关键字、字面量都属于原始表达式。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">num<span class="token punctuation">;</span> <span class="token comment">// 变量 原始表达式</span></span>
<span class="line"><span class="token string">&#39;123&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 字符串字面量 原始表达式</span></span>
<span class="line"><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment">// 关键字 原始表达式</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些原始表达式在程序运行过程中是不会报错的，这也是最简单的表达式。</p><h3 id="_2-2-复合表达式" tabindex="-1"><a class="header-anchor" href="#_2-2-复合表达式"><span>2.2 复合表达式</span></a></h3><p>原始表达式加上运算符就形成了复合表达式。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 两个数字字面量 使用乘号连接</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_2-3-定义表达式" tabindex="-1"><a class="header-anchor" href="#_2-3-定义表达式"><span>2.3 定义表达式</span></a></h3><p>定义表达式及定义一个变量。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> person<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> func<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-初始化表达式" tabindex="-1"><a class="header-anchor" href="#_2-4-初始化表达式"><span>2.4 初始化表达式</span></a></h3><p><code>初始化表达</code>式<code>与定义表达式</code>不同，<code>初始化表达式</code>在定义变量的同时对变量做了初始化。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> number <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外还有非常非常多的表达式，通过这些简单的表达式，我相信读者对概念已经有了一定的理解。</p><h2 id="_3-小结" tabindex="-1"><a class="header-anchor" href="#_3-小结"><span>3. 小结</span></a></h2><p>表达式的概念很广泛，特别在数学领域更是常见。</p><p>在 JavaScript 中，基本所有的语句都能分解成表达式。</p><p>理解表达式的概念，可以更好的与他人交流，更容易的参阅文献，更快速的理解相关内容。</p>`,37)]))}const o=a(t,[["render",l]]),r=JSON.parse('{"path":"/JavaScript/10.html","title":"JavaScript 表达式","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1. 为什么要理解表达式","slug":"_1-为什么要理解表达式","link":"#_1-为什么要理解表达式","children":[]},{"level":2,"title":"2. JavaScript 表达式","slug":"_2-javascript-表达式","link":"#_2-javascript-表达式","children":[{"level":3,"title":"2.1 原始表达式","slug":"_2-1-原始表达式","link":"#_2-1-原始表达式","children":[]},{"level":3,"title":"2.2 复合表达式","slug":"_2-2-复合表达式","link":"#_2-2-复合表达式","children":[]},{"level":3,"title":"2.3 定义表达式","slug":"_2-3-定义表达式","link":"#_2-3-定义表达式","children":[]},{"level":3,"title":"2.4 初始化表达式","slug":"_2-4-初始化表达式","link":"#_2-4-初始化表达式","children":[]}]},{"level":2,"title":"3. 小结","slug":"_3-小结","link":"#_3-小结","children":[]}],"git":{},"filePathRelative":"JavaScript/10.md"}');export{o as comp,r as data};
