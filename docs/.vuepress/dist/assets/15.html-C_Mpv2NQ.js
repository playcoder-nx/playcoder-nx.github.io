import{_ as s,c as a,a as p,o as e}from"./app-C52C1I_-.js";const t={};function l(c,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="javascript-数组" tabindex="-1"><a class="header-anchor" href="#javascript-数组"><span>JavaScript 数组</span></a></h1><blockquote><p>数组是一种使用整数作为键 (integer-key-ed) 属性和长度 (length) 属性之间关联的常规对象。此外，数组对象还继承了 Array.prototype 的一些操作数组的便捷方法。——MDN</p></blockquote><p>数组可以存放多个值。数组的<code>数</code>不是指数字，而是指<code>数据</code>，数组可以存放任意数据类型的值。</p><p>从理论上讲，在内存允许的情况下，数组的长度是无限的。</p><p><img src="https://img.mukewang.com/wiki/5e7ae0cd095da6a214400768.jpg" alt="图片描述"></p><h2 id="_1-创建数组" tabindex="-1"><a class="header-anchor" href="#_1-创建数组"><span>1. 创建数组</span></a></h2><p>数组由中括号 <code>[]</code> 包裹，每一项之间用逗号 <code>,</code> 分隔。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token punctuation">[</span>第一项<span class="token punctuation">,</span> 第二项<span class="token punctuation">,</span> 第三项<span class="token punctuation">,</span> <span class="token operator">...</span> <span class="token punctuation">,</span> 第n项<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>创建数组最常见的方式是使用字面量。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> hobby <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c++&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;python&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;javascript&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hobby<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过直接描述一个数组的方式就可以创建一个数组。</p><h2 id="_2-数组长度" tabindex="-1"><a class="header-anchor" href="#_2-数组长度"><span>2. 数组长度</span></a></h2><p>数组的长度可以通过 <code>length</code> 属性获取。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-访问数组成员" tabindex="-1"><a class="header-anchor" href="#_3-访问数组成员"><span>3. 访问数组成员</span></a></h2><p>数组的每一项可以称之为<code>成员</code>。</p><p>数组成员可以通过<code>下标</code>访问，下标也可以称为<code>索引</code>。</p><p>下标可以理解成数组成员的编号，编号从 0 开始，到数组长度 -1 。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;第一项&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;第二项&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;第三项&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> item1 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 从0开始编号 第一项的下标是0</span></span>
<span class="line"><span class="token keyword">var</span> item2 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> item3 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：第一项</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：第二项</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：第三项</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过<code>数组[下标]</code> 的方式即可访问到成员。</p><h2 id="_4-遍历数组" tabindex="-1"><a class="header-anchor" href="#_4-遍历数组"><span>4. 遍历数组</span></a></h2><p>数组遍历主要有两种方式：</p><ul><li>for 循环</li><li>forEach 方法</li></ul><h3 id="_4-1-for-循环" tabindex="-1"><a class="header-anchor" href="#_4-1-for-循环"><span>4.1 for 循环</span></a></h3><p>使用 for 循环，从数组下标 0 循环到最后一位，过程中通过下标访问成员。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;第一项&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;第二项&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;第三项&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;第四项&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;第五项&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> i<span class="token punctuation">,</span> len<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-foreach-方法" tabindex="-1"><a class="header-anchor" href="#_4-2-foreach-方法"><span>4.2 forEach 方法</span></a></h3><p><code>forEach</code> 是数组原型上的方法，所有数组都具有此方法。</p><p>forEach 接收一个函数作为参数，在遍历每一项的时候，这个函数会被调用，同时将当前遍历到的项、当前项的下标（索引)、遍历的数组作为函数参数传递过来。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;第一项&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;第二项&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;第三项&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;第四项&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;第五项&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;第&#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;项的值是：&#39;</span> <span class="token operator">+</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">代码块<span class="token number">12345</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二个参数的值也是从 0 开始的。</p><p>通常第三个参数用到的比较少，没有用到可以没必要接收这个参数。</p><h2 id="_5-修改数组成员的值" tabindex="-1"><a class="header-anchor" href="#_5-修改数组成员的值"><span>5. 修改数组成员的值</span></a></h2><p>成员的值可以通过<code>数组[下标] = 值</code>的方式进行修改。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;一&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;三&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;三&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;四&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：&quot;三&quot;</span></span>
<span class="line"></span>
<span class="line">arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;二&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：&quot;二&quot;</span></span>
<span class="line">代码块<span class="token number">1234567</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-增减数组项" tabindex="-1"><a class="header-anchor" href="#_6-增减数组项"><span>6. 增减数组项</span></a></h2><p>数组提供了很多方式来对成员进行增减操作，也可以依靠其他特性来增加减少数组成员。</p><h3 id="_6-1-增加" tabindex="-1"><a class="header-anchor" href="#_6-1-增加"><span>6.1 增加</span></a></h3><h4 id="_6-1-1-直接给指定位置赋值" tabindex="-1"><a class="header-anchor" href="#_6-1-1-直接给指定位置赋值"><span>6.1.1 直接给指定位置赋值</span></a></h4><p>通过下标，直接访问到一个不存在的成员，然后进行赋值，就可以为数组增加一项。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;jquery&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span></span>
<span class="line">arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;angular&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：&quot;angular&quot;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：3</span></span>
<span class="line">代码块<span class="token number">1234567</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-1-2-push-方法" tabindex="-1"><a class="header-anchor" href="#_6-1-2-push-方法"><span>6.1.2 push 方法</span></a></h4><p>push 方法接收任意个参数，这些参数会依次添加到数组的末尾，添加完后返回数组新的长度。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：[1, 2, 3]</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：3</span></span>
<span class="line">代码块<span class="token number">123456</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通常不会用到这个返回的长度，可以不需要接收返回值。</p><h4 id="_6-1-3-unshift-方法" tabindex="-1"><a class="header-anchor" href="#_6-1-3-unshift-方法"><span>6.1.3 unshift 方法</span></a></h4><p>unshift 接收任意个参数，这些参数会被添加到数组头部，添加完后返回数组新的长度。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：[1, 2, 3]</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：3</span></span>
<span class="line">代码块<span class="token number">123456</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-删除" tabindex="-1"><a class="header-anchor" href="#_6-2-删除"><span>6.2 删除</span></a></h3><h4 id="_6-2-1-pop-方法" tabindex="-1"><a class="header-anchor" href="#_6-2-1-pop-方法"><span>6.2.1 pop 方法</span></a></h4><p>pop 方法会删除数组最后一项，并将删除项作为返回值。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;c++&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;javascript&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> lastOne <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lastOne<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：&quot;javascript&quot;</span></span>
<span class="line">代码块<span class="token number">12345</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果数组是空的，调用 pop 会返回 <code>undefined</code> 。</p><h4 id="_6-2-2-shift-方法" tabindex="-1"><a class="header-anchor" href="#_6-2-2-shift-方法"><span>6.2.2 shift 方法</span></a></h4><p>shift 方法会删除数组的第一项，并将删除项作为返回值。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;996&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;007&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> first <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：&quot;996&quot;</span></span>
<span class="line">代码块<span class="token number">12345</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与 pop 一样，如果是数组为空的情况下，会返回 <code>undefined</code> 。</p><h3 id="_6-3-在数组中间删除或添加值" tabindex="-1"><a class="header-anchor" href="#_6-3-在数组中间删除或添加值"><span>6.3 在数组中间删除或添加值</span></a></h3><p>splice 方法可以在任意位置添加或删除值。</p><p>这个方法接受任意个参数，前两个为从哪里开始（从 0 开始计数），删除几个，从第三个开始则是要添加的项。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>从第几个开始<span class="token punctuation">,</span> 要删除几个<span class="token punctuation">,</span> 要添加的项目<span class="token number">1</span><span class="token punctuation">,</span> 要添加的项目<span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> 要添加的项目n<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">代码块<span class="token number">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不需要删除，只需要往数组中间插入值，只需要传递 0 给第二个参数即可。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 在第二项之后插入3, 4, 5</span></span>
<span class="line"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">代码块<span class="token number">1234</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为第一个参数是从 0 开始计数，所以在第二项之后，就是要插入在第三项的位置，所以传递 2 ，不需要删除项目，所以第二个参数传递 0 ，之后就是要插入的项。</p><blockquote><p>注意：往数组中间插入数据的情况相对较少，数组做这种操作是比较低效的，小量的操作对性能的影响可以忽略不计，但有超大量非首尾的增减操作，应考虑使用<code>链表</code>。</p></blockquote><p>删除项只需要指定从第几项开始删除，要删除几项即可。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 去除 &#39;996&#39;、&#39;加班&#39;</span></span>
<span class="line"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;早睡早起&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;朝九晚五&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;996&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;加班&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">代码块<span class="token number">1234</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>&#39;996’和’加班’是连续的，所以一个 splice 就可以删除掉这 2 项，2 个参数的意思就是从第 2 项开始，删除 2 项。</p><h2 id="_7-清空数组" tabindex="-1"><a class="header-anchor" href="#_7-清空数组"><span>7. 清空数组</span></a></h2><p>将数组所有成员全部删除就达到了清空的效果。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">代码块<span class="token number">123</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然也可以使用 <code>pop</code> 一个个删除，但是通常都不会用这种方式。</p><p>清空数组最常用的方式是重新给变量赋值。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blur&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出空数组：[]</span></span>
<span class="line">代码块<span class="token number">12345</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过给变量赋值一个新的空数组，达到清空数组的目的，但是这样会改变引用，新赋值的数组和之前的数组并不是同一个。</p><p>另一种方式可以让保持对当前数组的引用。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;yellow&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;black&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">代码块<span class="token number">123</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过给数组的 <code>length</code> 属性重新赋值，也可以达到清空数组的效果。</p><p>这种方式相对灵活，假如需求是保留三项、五项，只需要给 length 赋值对应的值即可。</p><h2 id="_8-使用-array-创建数组" tabindex="-1"><a class="header-anchor" href="#_8-使用-array-创建数组"><span>8. 使用 Array 创建数组</span></a></h2><p>内建对象 <code>Array</code> 也可以用来创建数组。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">代码块<span class="token number">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果什么参数都不传递，则返回一个空数组。</p><p>传参则有 2 种情况：</p><ul><li>如果只传一个参数，并且这个参数的类型为数字，则会创建长度为这个数字的数组；</li><li>传入其他类型的一个或者多个参数，则会将这些参数组合成数组。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：[empty × 10]</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：10</span></span>
<span class="line">代码块<span class="token number">1234</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在控制台可以观察到这个数组长度为 10，但均为 <code>empty</code> 。</p><p>如果尝试着访问其中某一项，得到的值是 <code>undefined</code> 。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">&#39;item1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;item3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：[&quot;item1&quot;]</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：[1, 2, &quot;item3&quot;]</span></span>
<span class="line">代码块<span class="token number">123456</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样创建的数组，成员与传参一致。</p><h2 id="_9-数组中的-undefined-与-empty" tabindex="-1"><a class="header-anchor" href="#_9-数组中的-undefined-与-empty"><span>9. 数组中的 undefined 与 empty</span></a></h2><p>在数组中 undefined 与 empty 是有区别的。</p><p>使数组项变成 <code>empty</code> 通常有两种方式。</p><ul><li>使用 Array 对象同时提供了长度创建出来的数组</li><li>使用 <code>delete</code> 关键字删除的数组项</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">delete</span> arr2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">代码块<span class="token number">12345678910</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://img.mukewang.com/wiki/5e7adc990a1fe2d413760566.jpg" alt="图片描述"></p><p>虽然 empty 的项在访问的时候返回的是 undefined ，但其本身只做简单占位，\\ 是遍历不到的。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">delete</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">代码块<span class="token number">123456789101112</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面两种遍历的方式都是遍历不到 <code>empty</code> 项的，而 <code>undefined</code> 是可以遍历到的，这是最主要的区别。</p><h2 id="_10-使用数组" tabindex="-1"><a class="header-anchor" href="#_10-使用数组"><span>10. 使用数组</span></a></h2><p>数组非常常用，大量的 HTML 字符串在做拼接的时候，就会使用到数组。</p><p>除了用于简单的存储数据，数组也可以被用来解决问题。</p><h3 id="_10-1-判断括号是否匹配" tabindex="-1"><a class="header-anchor" href="#_10-1-判断括号是否匹配"><span>10.1 判断括号是否匹配</span></a></h3><p>判断一个数学式子的括号匹配是否合法，如 <code>(1 + 2) * (3 + 4))</code> ，这个式子就是不合法的。</p><p>校验括号合法不单单要看左括号和右括号的数量是否相等，还要看括号的顺序， <code>))((</code> 这样的括号顺序一定是错误的。</p><p>利用 JavaScript 数组的特性，可以很容易的实现。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 空数组</span></span>
<span class="line"><span class="token keyword">var</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 一个式子</span></span>
<span class="line"><span class="token keyword">var</span> equation <span class="token operator">=</span> <span class="token string">&#39;(1 + (2 - 3) * 4) / (1 - 3)&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> i<span class="token punctuation">,</span> len<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> equation<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>equation<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;(&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果碰到左括号</span></span>
<span class="line">    <span class="token comment">// 往数组里放个1</span></span>
<span class="line">    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>equation<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果碰到右括号</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 判断数组长度，如果是0，则肯定是出错的，数组长度0的时候说明没有左括号，没有左括号是不可能出现右括号的</span></span>
<span class="line">      <span class="token comment">// 随便放一个1</span></span>
<span class="line">      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 如果数组不是空的 就从数组末尾拿一个走。</span></span>
<span class="line">    stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 判断数组长度</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 如果数组已经空了，说明括号都一一对应，式子里的括号没问题。</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;括号合法&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;括号不合法&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">代码块<span class="token number">12345678910111213141516171819202122232425262728</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用数组实现的具体思路就是，碰到左括号就往数组里放一个成员，碰到一个右括号就拿掉一个成员。</p><p>这样如果最后有剩下，说明括号没有一一成对。</p><p><code>(1+2*(3+4))*1</code> 如这样一个式子：</p><div class="language-txt line-numbers-mode" data-highlighter="prismjs" data-ext="txt"><pre><code><span class="line">初始化操作：</span>
<span class="line">  定义数组 arr为空</span>
<span class="line"></span>
<span class="line">从式子第一个字符开始循环</span>
<span class="line">  第一次循环：</span>
<span class="line">    数组的值为 []</span>
<span class="line">    得到字符&quot;(&quot;</span>
<span class="line">    判断是左括号，往数组里放一个1，表示碰到了左括号</span>
<span class="line"></span>
<span class="line">  第二次循环</span>
<span class="line">    数组的值为 [1]</span>
<span class="line">    得到字符&quot;+&quot;</span>
<span class="line">    既不是左括号，又不是右括号，进行下一轮循环，不做操作</span>
<span class="line"></span>
<span class="line">  第三次循环</span>
<span class="line">  第四次循环</span>
<span class="line">  第五次循环</span>
<span class="line">    与第二次循环基本一致</span>
<span class="line"></span>
<span class="line">  第六次循环</span>
<span class="line">    数组的值为 [1]</span>
<span class="line">    得到字符&quot;(&quot;</span>
<span class="line">    是左括号 往数组里再放一个1，表示碰到了左括号</span>
<span class="line"></span>
<span class="line">  第七次循环</span>
<span class="line">    数组值为 [1, 1]</span>
<span class="line">    得到字符&quot;3&quot;</span>
<span class="line">    不是左括号，也不是右括号，进行下一轮循环</span>
<span class="line"></span>
<span class="line">  第八次循环</span>
<span class="line">  第九次循环</span>
<span class="line">    与第七次一致</span>
<span class="line"></span>
<span class="line">  第十次循环</span>
<span class="line">    数组的值为 [1, 1]</span>
<span class="line">    得到字符&quot;)&quot;</span>
<span class="line">    是右括号，从数组末尾拿掉一项</span>
<span class="line"></span>
<span class="line">  第十一次循环</span>
<span class="line">    数组的值为 [1]</span>
<span class="line">    得到字符&quot;)&quot;</span>
<span class="line">    是右括号，从数组末尾拿掉一项</span>
<span class="line"></span>
<span class="line">  第十二次循环</span>
<span class="line">  第十三次循环</span>
<span class="line">    数组值为 []</span>
<span class="line">    都不是括号，不做操作</span>
<span class="line">循环结束</span>
<span class="line"></span>
<span class="line">判断数组值，如果是空的，说明括号匹配完了，显然 (1+2*(3+4))*1 是合法的</span>
<span class="line">代码块1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然这种判断有局限性，假如碰到 <code>((1+)2)-3</code> 这种非括号造成不合法的式子，就判断不出来了。</p><blockquote><p>其实这里用到了<code>栈</code>这种数据结构，这个问题在栈的应用上很经典，是算法入门常见面试题之一。</p></blockquote><h2 id="_11-类数组" tabindex="-1"><a class="header-anchor" href="#_11-类数组"><span>11. 类数组</span></a></h2><p>类数组并不是数组，而是长得像数组的对象。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> fakeArray <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token number">0</span><span class="token operator">:</span> <span class="token string">&#39;第一项&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&#39;第二项&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">3</span><span class="token operator">:</span> <span class="token string">&#39;第三项&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fakeArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：&quot;第一项&quot;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fakeArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：3</span></span>
<span class="line">代码块<span class="token number">123456789</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述例子中的 <code>fakeArray</code> 就是一个类数组，属性是以类型数组的<code>下标</code>的形式存在，同时也具有 <code>length</code> 属性。</p><p>这种类数组对象，也被称为 <code>array-like对象</code> ，部分文献也称为<code>伪数组</code>。</p><p>类数组对象可以转化为数组，许多方法在设计时也会考虑支持类数组。</p><h2 id="_12-小结" tabindex="-1"><a class="header-anchor" href="#_12-小结"><span>12. 小结</span></a></h2><p>JavaScript 中的数组非常灵活，可以存放任意类型、任意长度 (内存足够的情况下) 的数据，其下标从 0 开始，最大到数组长度减去 1 ，并提供了一系列方法，来完成增、删、改、查操作。</p><p>数组项的 <code>empty</code> 和 <code>undefined</code> 的区别，是面试中常问的问题。</p>`,122)]))}const o=s(t,[["render",l]]),u=JSON.parse('{"path":"/JavaScript/15.html","title":"JavaScript 数组","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1. 创建数组","slug":"_1-创建数组","link":"#_1-创建数组","children":[]},{"level":2,"title":"2. 数组长度","slug":"_2-数组长度","link":"#_2-数组长度","children":[]},{"level":2,"title":"3. 访问数组成员","slug":"_3-访问数组成员","link":"#_3-访问数组成员","children":[]},{"level":2,"title":"4. 遍历数组","slug":"_4-遍历数组","link":"#_4-遍历数组","children":[{"level":3,"title":"4.1 for 循环","slug":"_4-1-for-循环","link":"#_4-1-for-循环","children":[]},{"level":3,"title":"4.2 forEach 方法","slug":"_4-2-foreach-方法","link":"#_4-2-foreach-方法","children":[]}]},{"level":2,"title":"5. 修改数组成员的值","slug":"_5-修改数组成员的值","link":"#_5-修改数组成员的值","children":[]},{"level":2,"title":"6. 增减数组项","slug":"_6-增减数组项","link":"#_6-增减数组项","children":[{"level":3,"title":"6.1 增加","slug":"_6-1-增加","link":"#_6-1-增加","children":[]},{"level":3,"title":"6.2 删除","slug":"_6-2-删除","link":"#_6-2-删除","children":[]},{"level":3,"title":"6.3 在数组中间删除或添加值","slug":"_6-3-在数组中间删除或添加值","link":"#_6-3-在数组中间删除或添加值","children":[]}]},{"level":2,"title":"7. 清空数组","slug":"_7-清空数组","link":"#_7-清空数组","children":[]},{"level":2,"title":"8. 使用 Array 创建数组","slug":"_8-使用-array-创建数组","link":"#_8-使用-array-创建数组","children":[]},{"level":2,"title":"9. 数组中的 undefined 与 empty","slug":"_9-数组中的-undefined-与-empty","link":"#_9-数组中的-undefined-与-empty","children":[]},{"level":2,"title":"10. 使用数组","slug":"_10-使用数组","link":"#_10-使用数组","children":[{"level":3,"title":"10.1 判断括号是否匹配","slug":"_10-1-判断括号是否匹配","link":"#_10-1-判断括号是否匹配","children":[]}]},{"level":2,"title":"11. 类数组","slug":"_11-类数组","link":"#_11-类数组","children":[]},{"level":2,"title":"12. 小结","slug":"_12-小结","link":"#_12-小结","children":[]}],"git":{"updatedTime":1742873601000,"contributors":[{"name":"playforkeeps","username":"playforkeeps","email":"597461518@qq.com","commits":1,"url":"https://github.com/playforkeeps"}],"changelog":[{"hash":"33cb72133abd6277291ef0c51663acdb35645a8b","time":1742873601000,"email":"597461518@qq.com","author":"playforkeeps","message":"更新 vuepress"}]},"filePathRelative":"JavaScript/15.md"}');export{o as comp,u as data};
